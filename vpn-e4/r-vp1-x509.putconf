#!/usr/bin/perl
 
use strict;
use warnings;
 
my $version = "0.3.1" ;
my $host   = "R-vp1";
my $remhost = "R-vp2";
my $domain = "gsb.lan";
my $ip1    = "192.168.1.2";  # eth0 interne
my $ip2    = "10.0.0.1"; # eth1 liaison vpn
my $remip  = "10.0.0.2";
my $mask   = "255.255.255.252";

my $mynet  = "192.168.1.0";
my $remnet = "172.16.128.0";

my $gw     = "192.168.1.1";
my $dns1   = "172.16.0.6";
 
# les paquets a installer 
my $packages = "racoon ipsec-tools tcpdump";
 
sub putconf {
        my ($file, $msg)= @_;
        print "Generation du fichier $file ...\n";
        my $dat = `date`;
        open (FILE, ">$file") or die "Erreur ecriture fichier $file : $! \n";
        print FILE "### $version - putconf - $dat" if ($file ne "/etc/hostname") ;
        print FILE $msg;
        close FILE;
};
 
 
system "aptitude install $packages" if ($packages);


putconf("/etc/hostname", "$host\n");
 
putconf ("/etc/hosts",
"127.0.0.1      localhost.localdomain localhost
127.0.1.1       $host
$ip1     $host.$domain $host
$ip2     $host.$domain $host
$remip $remhost.$domain $remhost 

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
");
 
putconf ("/etc/network/interfaces",
"
# The loopback network interface
auto lo
iface lo inet loopback
 
# The primary network interface
allow-hotplug eth0
iface eth0 inet static
        address $ip1
        netmask $mask
	gateway $gw
	up /root/routage.sh
	up /root/iptables.sh

allow-hotplug eth1
iface eth1 inet static
        address $ip2
        netmask 255.255.255.0
	up route add -net 172.16.0.0 n netmask 255.255.255.0 gw 192.168.1.1
	up /sbin/sysctl -w net.ipv4.ip_forward='1' 

");

putconf ("/root/routage.sh",
"#!/bin/bash
echo 1 > /proc/sys/net/ipv4/ip_forward
route add -net 172.16.128.0/24 gw 192.168.1.2
");


system "chmod +x /root/routage.sh";

 
putconf ("/etc/resolv.conf",
"domain $domain
nameserver $dns1
");

putconf ("/etc/racoon/racoon.conf",
"

path certificate \"/etc/racoon/certs\";

remote $remip \{
	exchange_mode main;
	certificate_type x509 \"IPSECcert.pem\" \"IPSECkey.pem\";
	verify_cert on;
	my_identifier asn1dn;
	peers_identifier asn1dn;
	proposal \{
		encryption_algorithm 3des;
		hash_algorithm md5;
		authentication_method rsasig;
		dh_group modp1024;
	\}
\}

 sainfo address 172.16.128.0/24 any address  192.168.200.0/24 any
    {
	lifetime            time    1 hour;

	encryption_algorithm        aes;
	authentication_algorithm    hmac_sha1;
	compression_algorithm       deflate;
    }

    sainfo  address  192.168.1.0/24 any   address  192.168.200.0/24 any
    {
	lifetime            time    1 hour;

	encryption_algorithm        aes;
	authentication_algorithm    hmac_sha1;
	compression_algorithm       deflate;
    }

    sainfo  address  172.16.128.0/24 any   address  172.16.0.0/24 any
    {
	lifetime            time    1 hour;

	encryption_algorithm        aes;
	authentication_algorithm    hmac_sha1;
	compression_algorithm       deflate;
    }

    sainfo  address  192.168.1.0/24 any   address  172.16.0.0/24 any
    {
	lifetime            time    1 hour;

	encryption_algorithm        aes;
	authentication_algorithm    hmac_sha1;
	compression_algorithm       deflate;
    }

    sainfo  address  192.168.200.0/24 any   address  172.16.128.0/24 any
    {
	lifetime            time    1 hour;

	encryption_algorithm        aes;
	authentication_algorithm    hmac_sha1;
	compression_algorithm       deflate;
    }

    sainfo  address  192.168.200.0/24 any   address  192.168.1.0/24 any
    {
	lifetime            time    1 hour;

	encryption_algorithm        aes;
	authentication_algorithm    hmac_sha1;
	compression_algorithm       deflate;
    }

    sainfo  address  172.16.0.0/24 any   address  172.16.0.0/24 any
    {
	lifetime            time    1 hour;

	encryption_algorithm        aes;
	authentication_algorithm    hmac_sha1;
	compression_algorithm       deflate;
    }

    sainfo  address  172.16.0.0/24 any   address  192.168.1.0/24 any
    {
	lifetime            time    1 hour;

	encryption_algorithm        aes;
	authentication_algorithm    hmac_sha1;
	compression_algorithm       deflate;
    }


");



putconf (" /etc/ipsec-tools.conf",
"
flush;
spdflush;

spdadd $mynet/24 $remnet/24 any -P out ipsec
           esp/tunnel/$ip2-$remip/require;

spdadd $remnet/24 $mynet/24 any -P in ipsec
           esp/tunnel/$remip-$ip2/require;

");
putconf ("/usr/lib/ssl/openssl.cnf",
"
# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.

# This definition stops the following lines choking if HOME isn't
# defined.
HOME = .
RANDFILE = \$ENV::HOME/.rnd

# Extra OBJECT IDENTIFIER info:
#oid_file = \$ENV::HOME/.oid
oid_section = new_oids

# To use this configuration file with the \"-extfile\" option of the
# \"openssl x509\" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions =
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]

# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# Add a simple OID like this:
# testoid1=1.2.3.4
# Or use config file substitution like this:
# testoid2=\${testoid1}.5.6

# Policies used by the TSA examples.
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

####################################################################
[ ca ]
default_ca = CA_default # The default ca section

####################################################################
[ CA_default ]

dir = /root/scripts/demoCA # Where everything is kept
certs = \$dir/certs # Where the issued certs are kept
crl_dir = \$dir/crl # Where the issued crl are kept
database = \$dir/index.txt # database index file.
#unique_subject = no # Set to 'no' to allow creation of
# several ctificates with same subject.
new_certs_dir = \$dir/newcerts # default place for new certs.

certificate = \$dir/cacert.pem # The CA certificate
serial = \$dir/serial # The current serial number
crlnumber = \$dir/crlnumber # the current crl number
# must be commented out to leave a V1 CRL
crl = \$dir/crl.pem # The current CRL
private_key = \$dir/private/cakey.pem# The private key
RANDFILE = \$dir/private/.rand # private random number file

x509_extensions = usr_cert # The extentions to add to the cert

# Comment out the following two lines for the \"traditional\"
# (and highly broken) format.
name_opt = ca_default # Subject Name options
cert_opt = ca_default # Certificate field options

# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions = crl_ext

default_days = 365 # how long to certify for
default_crl_days= 30 # how long before next CRL
default_md = default # use public key default MD
preserve = no # keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy = policy_match

# For the CA policy
[ policy_match ]
countryName = match
stateOrProvinceName = match
organizationName = match
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

####################################################################
[ req ]
default_bits = 2048
default_keyfile = privkey.pem
distinguished_name = req_distinguished_name
attributes = req_attributes
x509_extensions = v3_ca # The extentions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret

# This sets a mask for permitted string types. There are several options.
# default: PrintableString, T61String, BMPString.
# pkix : PrintableString, BMPString (PKIX recommendation before 2004)
# utf8only: only UTF8Strings (PKIX recommendation after 2004).
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX a literal mask value.
# WARNING: ancient versions of Netscape crash on BMPStrings or UTF8Strings.
string_mask = utf8only

# req_extensions = v3_req # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName = Country Name (2 letter code)
countryName_default = FR
countryName_min = 2
countryName_max = 2

stateOrProvinceName = State or Province Name (full name)
stateOrProvinceName_default = France

localityName = Locality Name (eg, city)
localityName = Dijon

0.organizationName = Organization Name (eg, company)
0.organizationName_default = GSB

# we can do this but it is not needed normally :-)
#1.organizationName = Second Organization Name (eg, company)
#1.organizationName_default = Le Castel

organizationalUnitName = Organizational Unit Name (eg, section)
organizationalUnitName_default = Le Castel

commonName = Common Name (e.g. server FQDN or YOUR name)
commonName_max = 64

emailAddress = Email Address
emailAddress_max = 64
emailAddress_default = administrator\@gsb.lan

# SET-ex3 = SET extension number 3

[ req_attributes ]
challengePassword = A challenge password
challengePassword_min = 4
challengePassword_max = 20

unstructuredName = An optional company name

[ usr_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType = server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment = \"OpenSSL Generated Certificate\"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName=email:move

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl = http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# This is required for TSA certificates.
# extendedKeyUsage = critical,timeStamping

[ v3_req ]

# Extensions to add to a certificate request

basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]


# Extensions for a typical CA


# PKIX recommendation.

subjectKeyIdentifier=hash

authorityKeyIdentifier=keyid:always,issuer

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints = critical,CA:true
# So we do this instead.
basicConstraints = CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
# keyUsage = cRLSign, keyCertSign

# Some might want this also
# nsCertType = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName=email:copy
# Copy issuer details
# issuerAltName=issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj=DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints= critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always

[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType = server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment = \"OpenSSL Generated Certificate\"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName=email:move

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl = http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# This really needs to be in place for it to be a proxy certificate.
proxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

####################################################################
[ tsa ]

default_tsa = tsa_config1 # the default TSA section

[ tsa_config1 ]

# These are used by the TSA reply generation only.
dir = ./demoCA # TSA root directory
serial = \$dir/tsaserial # The current serial number (mandatory)
crypto_device = builtin # OpenSSL engine to use for signing
signer_cert = \$dir/tsacert.pem # The TSA signing certificate
# (optional)
certs = \$dir/cacert.pem # Certificate chain to include in reply
# (optional)
signer_key = \$dir/private/tsakey.pem # The TSA private key (optional)

default_policy = tsa_policy1 # Policy if request did not specify it
# (optional)
other_policies = tsa_policy2, tsa_policy3 # acceptable policies (optional)
digests = md5, sha1 # Acceptable message digests (mandatory)
accuracy = secs:1, millisecs:500, microsecs:100 # (optional)
clock_precision_digits = 0 # number of digits after dot. (optional)
ordering = yes # Is ordering defined for timestamps?
# (optional, default: no)
tsa_name = yes # Must the TSA name be included in the reply?
# (optional, default: no)
ess_cert_id_chain = no # Must the ESS cert id chain be included?
# (optional, default: no)

");
